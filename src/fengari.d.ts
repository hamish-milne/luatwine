/** Declaration file generated by dts-gen */
declare module 'fengari' {

export class lua_State {}

export class luaL_Buffer {}

export type lua_CFunction = (L: lua_State) => number;

export type luaL_Reg = {name: string, func: lua_CFunction}

export const FENGARI_AUTHORS: string;

export const FENGARI_COPYRIGHT: string;

export const FENGARI_RELEASE: string;

export const FENGARI_VERSION: string;

export const FENGARI_VERSION_MAJOR: string;

export const FENGARI_VERSION_MINOR: string;

export const FENGARI_VERSION_NUM: number;

export const FENGARI_VERSION_RELEASE: string;

export function luastring_eq(a: any, b: any): any;

export function luastring_indexOf(s: any, v: any, i: any): any;

export function luastring_of(): any;

export function to_jsstring(value: any, from: any, to: any, replacement_char: any): any;

export function to_luastring(str: any, cache: any): any;

export function to_uristring(a: any): any;

export namespace lauxlib {
    const LUA_ERRFILE: number;

    const LUA_NOREF: number;

    const LUA_REFNIL: number;

    function luaL_Buffer(...args: any[]): void;

    function luaL_addchar(B: luaL_Buffer, c: any): void;

    function luaL_addlstring(B: luaL_Buffer, s: any, l: any): void;

    function luaL_addsize(B: luaL_Buffer, s: any): void;

    function luaL_addstring(B: luaL_Buffer, s: any): void;

    function luaL_addvalue(B: luaL_Buffer): void;

    function luaL_argcheck(L: lua_State, cond: any, arg: number, extramsg: any): void;

    function luaL_argerror(L: lua_State, arg: number, extramsg: any): any;

    function luaL_buffinit(L: lua_State, B: any): void;

    function luaL_buffinitsize(L: lua_State, B: any, sz: number): any;

    function luaL_callmeta(L: lua_State, obj: any, event: any): any;

    function luaL_checkany(L: lua_State, arg: number): void;

    function luaL_checkinteger(L: lua_State, arg: number): any;

    function luaL_checklstring(L: lua_State, arg: number): any;

    function luaL_checknumber(L: lua_State, arg: number): any;

    function luaL_checkoption(L: lua_State, arg: number, def: any, lst: any): any;

    function luaL_checkstack(L: lua_State, space: any, msg: any): void;

    function luaL_checkstring(L: lua_State, arg: number): any;

    function luaL_checktype(L: lua_State, arg: number, t: any): void;

    function luaL_checkudata(L: lua_State, ud: any, tname: string): any;

    function luaL_checkversion(L: lua_State): void;

    function luaL_checkversion_(L: lua_State, ver: any, sz: number): void;

    function luaL_dofile(L: lua_State, filename: string): any;

    function luaL_dostring(L: lua_State, s: Uint8Array): number;

    function luaL_error(L: lua_State, fmt: any, argp: any): any;

    function luaL_execresult(L: lua_State, e: any): any;

    function luaL_fileresult(L: lua_State, stat: any, fname: string, e: any): any;

    function luaL_getmetafield(L: lua_State, obj: any, event: any): any;

    function luaL_getmetatable(L: lua_State, n: any): any;

    function luaL_getsubtable(L: lua_State, idx: number, fname: string): any;

    function luaL_gsub(L: lua_State, s: any, p: any, r: any): any;

    function luaL_len(L: lua_State, idx: number): any;

    function luaL_loadbuffer(L: lua_State, s: Uint8Array, sz: number, n: string): number;

    function luaL_loadbufferx(L: lua_State, buff: Uint8Array, size: number, name: string, mode: string | null): number;

    function luaL_loadfile(L: lua_State, filename: string): any;

    function luaL_loadfilex(L: lua_State, filename: string, mode: any): any;

    function luaL_loadstring(L: lua_State, s: Uint8Array): any;

    function luaL_newlib(L: lua_State, l: any): void;

    function luaL_newlibtable(L: lua_State): void;

    function luaL_newmetatable(L: lua_State, tname: string): any;

    function luaL_newstate(): lua_State;

    function luaL_opt(L: lua_State, f: any, n: any, d: any): any;

    function luaL_optinteger(L: lua_State, arg: number, def: any): any;

    function luaL_optlstring(L: lua_State, arg: number, def: any): any;

    function luaL_optnumber(L: lua_State, arg: number, def: any): any;

    function luaL_optstring(L: lua_State, arg: number, def: any): any;

    function luaL_prepbuffer(B: luaL_Buffer): any;

    function luaL_prepbuffsize(B: luaL_Buffer, sz: number): any;

    function luaL_pushresult(B: luaL_Buffer): void;

    function luaL_pushresultsize(B: luaL_Buffer, sz: number): void;

    function luaL_ref(L: lua_State, t: any): any;

    function luaL_requiref(L: lua_State, modname: string, openf: lua_CFunction, glb: number): void;

    function luaL_setfuncs(L: lua_State, l: luaL_Reg, nup: number): void;

    function luaL_setmetatable(L: lua_State, tname: string): void;

    function luaL_testudata(L: lua_State, ud: any, tname: string): any;

    function luaL_tolstring(L: lua_State, idx: number): any;

    function luaL_traceback(L: lua_State, L1: any, msg: any, level: any): void;

    function luaL_typename(L: lua_State, i: any): any;

    function luaL_unref(L: lua_State, t: any, ref: any): void;

    function luaL_where(L: lua_State, level: any): void;

    function lua_writestringerror(...args: any[]): void;

    namespace LUA_FILEHANDLE {
        const BYTES_PER_ELEMENT: number;

        const byteLength: number;

        const byteOffset: number;

        const length: number;

        function copyWithin(p0: any, p1: any): any;

        function entries(): any;

        function every(p0: any): any;

        function fill(p0: any): any;

        function filter(p0: any): any;

        function find(p0: any): any;

        function findIndex(p0: any): any;

        function forEach(p0: any): any;

        function includes(p0: any): any;

        function indexOf(p0: any): any;

        function join(p0: any): any;

        function keys(): any;

        function lastIndexOf(p0: any): any;

        function map(p0: any): any;

        function reduce(p0: any): any;

        function reduceRight(p0: any): any;

        function reverse(): any;

        function set(p0: any): any;

        function slice(p0: any, p1: any): any;

        function some(p0: any): any;

        function sort(p0: any): any;

        function subarray(p0: any, p1: any): any;

        function toLocaleString(): any;

        function toString(): any;

        function values(): any;

        namespace buffer {
            const byteLength: number;

            function slice(p0: any, p1: any): any;

        }

    }

    namespace LUA_LOADED_TABLE {
        const BYTES_PER_ELEMENT: number;

        const byteLength: number;

        const byteOffset: number;

        const length: number;

        function copyWithin(p0: any, p1: any): any;

        function entries(): any;

        function every(p0: any): any;

        function fill(p0: any): any;

        function filter(p0: any): any;

        function find(p0: any): any;

        function findIndex(p0: any): any;

        function forEach(p0: any): any;

        function includes(p0: any): any;

        function indexOf(p0: any): any;

        function join(p0: any): any;

        function keys(): any;

        function lastIndexOf(p0: any): any;

        function map(p0: any): any;

        function reduce(p0: any): any;

        function reduceRight(p0: any): any;

        function reverse(): any;

        function set(p0: any): any;

        function slice(p0: any, p1: any): any;

        function some(p0: any): any;

        function sort(p0: any): any;

        function subarray(p0: any, p1: any): any;

        function toLocaleString(): any;

        function toString(): any;

        function values(): any;

        namespace buffer {
            const byteLength: number;

            function slice(p0: any, p1: any): any;

        }

    }

    namespace LUA_PRELOAD_TABLE {
        const BYTES_PER_ELEMENT: number;

        const byteLength: number;

        const byteOffset: number;

        const length: number;

        function copyWithin(p0: any, p1: any): any;

        function entries(): any;

        function every(p0: any): any;

        function fill(p0: any): any;

        function filter(p0: any): any;

        function find(p0: any): any;

        function findIndex(p0: any): any;

        function forEach(p0: any): any;

        function includes(p0: any): any;

        function indexOf(p0: any): any;

        function join(p0: any): any;

        function keys(): any;

        function lastIndexOf(p0: any): any;

        function map(p0: any): any;

        function reduce(p0: any): any;

        function reduceRight(p0: any): any;

        function reverse(): any;

        function set(p0: any): any;

        function slice(p0: any, p1: any): any;

        function some(p0: any): any;

        function sort(p0: any): any;

        function subarray(p0: any, p1: any): any;

        function toLocaleString(): any;

        function toString(): any;

        function values(): any;

        namespace buffer {
            const byteLength: number;

            function slice(p0: any, p1: any): any;

        }

    }

}

export namespace lua {
    const LUA_AUTHORS: string;

    const LUA_COPYRIGHT: string;

    const LUA_ERRERR: number;

    const LUA_ERRGCMM: number;

    const LUA_ERRMEM: number;

    const LUA_ERRRUN: number;

    const LUA_ERRSYNTAX: number;

    const LUA_HOOKCALL: number;

    const LUA_HOOKCOUNT: number;

    const LUA_HOOKLINE: number;

    const LUA_HOOKRET: number;

    const LUA_HOOKTAILCALL: number;

    const LUA_MASKCALL: number;

    const LUA_MASKCOUNT: number;

    const LUA_MASKLINE: number;

    const LUA_MASKRET: number;

    const LUA_MINSTACK: number;

    const LUA_MULTRET: number;

    const LUA_NUMTAGS: number;

    const LUA_OK: number;

    const LUA_OPADD: number;

    const LUA_OPBAND: number;

    const LUA_OPBNOT: number;

    const LUA_OPBOR: number;

    const LUA_OPBXOR: number;

    const LUA_OPDIV: number;

    const LUA_OPEQ: number;

    const LUA_OPIDIV: number;

    const LUA_OPLE: number;

    const LUA_OPLT: number;

    const LUA_OPMOD: number;

    const LUA_OPMUL: number;

    const LUA_OPPOW: number;

    const LUA_OPSHL: number;

    const LUA_OPSHR: number;

    const LUA_OPSUB: number;

    const LUA_OPUNM: number;

    const LUA_REGISTRYINDEX: number;

    const LUA_RELEASE: string;

    const LUA_RIDX_GLOBALS: number;

    const LUA_RIDX_LAST: number;

    const LUA_RIDX_MAINTHREAD: number;

    const LUA_TBOOLEAN: number;

    const LUA_TFUNCTION: number;

    const LUA_TLIGHTUSERDATA: number;

    const LUA_TNIL: number;

    const LUA_TNONE: number;

    const LUA_TNUMBER: number;

    const LUA_TSTRING: number;

    const LUA_TTABLE: number;

    const LUA_TTHREAD: number;

    const LUA_TUSERDATA: number;

    const LUA_VERSION: string;

    const LUA_VERSION_MAJOR: string;

    const LUA_VERSION_MINOR: string;

    const LUA_VERSION_NUM: number;

    const LUA_VERSION_RELEASE: string;

    const LUA_YIELD: number;

    const lua_setallof: any;

    function lua_Debug(...args: any[]): void;

    function lua_absindex(L: lua_State, idx: number): any;

    function lua_arith(L: lua_State, op: any): void;

    function lua_atnativeerror(L: lua_State, errorf: any): any;

    function lua_atpanic(L: lua_State, panicf: lua_CFunction): any;

    function lua_call(L: lua_State, n: number, r: number): void;

    function lua_callk(L: lua_State, nargs: any, nresults: any, ctx: any, k: any): void;

    function lua_checkstack(L: lua_State, n: any): any;

    function lua_close(L: lua_State): void;

    function lua_compare(L: lua_State, index1: any, index2: any, op: any): any;

    function lua_concat(L: lua_State, n: any): void;

    function lua_copy(L: lua_State, fromidx: number, toidx: number): void;

    function lua_createtable(L: lua_State, narray: any, nrec: any): void;

    function lua_dump(L: lua_State, writer: any, data: any, strip: any): any;

    function lua_error(L: lua_State): void;

    function lua_gc(): void;

    function lua_getallocf(): any;

    function lua_getextraspace(): any;

    function lua_getfield(L: lua_State, idx: number, k: any): any;

    function lua_getglobal(L: lua_State, name: string): any;

    function lua_gethook(L: lua_State): any;

    function lua_gethookcount(L: lua_State): any;

    function lua_gethookmask(L: lua_State): any;

    function lua_geti(L: lua_State, idx: number, n: any): any;

    function lua_getinfo(L: lua_State, what: any, ar: any): any;

    function lua_getlocal(L: lua_State, ar: any, n: any): any;

    function lua_getmetatable(L: lua_State, objindex: any): any;

    function lua_getstack(L: lua_State, level: any, ar: any): any;

    function lua_gettable(L: lua_State, idx: number): any;

    function lua_gettop(L: lua_State): any;

    function lua_getupvalue(L: lua_State, funcindex: any, n: any): any;

    function lua_getuservalue(L: lua_State, idx: number): any;

    function lua_insert(L: lua_State, idx: number): void;

    function lua_isboolean(L: lua_State, n: any): any;

    function lua_iscfunction(L: lua_State, idx: number): any;

    function lua_isfunction(L: lua_State, idx: number): any;

    function lua_isinteger(L: lua_State, idx: number): any;

    function lua_islightuserdata(L: lua_State, idx: number): any;

    function lua_isnil(L: lua_State, n: any): any;

    function lua_isnone(L: lua_State, n: any): any;

    function lua_isnoneornil(L: lua_State, n: any): any;

    function lua_isnumber(L: lua_State, idx: number): any;

    function lua_isproxy(p: any, L: any): any;

    function lua_isstring(L: lua_State, idx: number): any;

    function lua_istable(L: lua_State, idx: number): any;

    function lua_isthread(L: lua_State, idx: number): any;

    function lua_isuserdata(L: lua_State, idx: number): any;

    function lua_isyieldable(L: lua_State): any;

    function lua_len(L: lua_State, idx: number): void;

    function lua_load(L: lua_State, reader: any, data: any, chunkname: string, mode: any): any;

    function lua_newstate(): lua_State;

    function lua_newtable(L: lua_State): void;

    function lua_newthread(L: lua_State): lua_State;

    function lua_newuserdata(L: lua_State, size: any): any;

    function lua_next(L: lua_State, idx: number): any;

    function lua_pcall(L: lua_State, n: any, r: any, f: any): any;

    function lua_pcallk(L: lua_State, nargs: any, nresults: any, errfunc: any, ctx: any, k: any): any;

    function lua_pop(L: lua_State, n: any): void;

    function lua_pushboolean(L: lua_State, b: any): void;

    function lua_pushcclosure(L: lua_State, fn: lua_CFunction, n: number): void;

    function lua_pushcfunction(L: lua_State, fn: lua_CFunction): void;

    function lua_pushfstring(L: lua_State, fmt: any, argp: any): any;

    function lua_pushglobaltable(L: lua_State): void;

    function lua_pushinteger(L: lua_State, n: any): void;

    function lua_pushjsclosure(L: lua_State, fn: any, n: any): void;

    function lua_pushjsfunction(L: lua_State, fn: any): void;

    function lua_pushlightuserdata(L: lua_State, p: any): void;

    function lua_pushliteral(L: lua_State, s: string): any;

    function lua_pushlstring(L: lua_State, s: string, len: number): any;

    function lua_pushnil(L: lua_State): void;

    function lua_pushnumber(L: lua_State, n: number): void;

    function lua_pushstring(L: lua_State, s: string): any;

    function lua_pushthread(L: lua_State): any;

    function lua_pushvalue(L: lua_State, idx: number): void;

    function lua_pushvfstring(L: lua_State, fmt: any, argp: any): any;

    function lua_rawequal(L: lua_State, index1: any, index2: any): any;

    function lua_rawget(L: lua_State, idx: number): any;

    function lua_rawgeti(L: lua_State, idx: number, n: any): any;

    function lua_rawgetp(L: lua_State, idx: number, p: any): any;

    function lua_rawlen(L: lua_State, idx: number): any;

    function lua_rawset(L: lua_State, idx: number): void;

    function lua_rawseti(L: lua_State, idx: number, n: any): void;

    function lua_rawsetp(L: lua_State, idx: number, p: any): void;

    function lua_register(L: lua_State, n: string, f: lua_CFunction): void;

    function lua_remove(L: lua_State, idx: number): void;

    function lua_replace(L: lua_State, idx: number): void;

    function lua_resume(L: lua_State, from: any, nargs: any): any;

    function lua_rotate(L: lua_State, idx: number, n: any): void;

    function lua_setfield(L: lua_State, idx: number, k: any): void;

    function lua_setglobal(L: lua_State, name: string): void;

    function lua_sethook(L: lua_State, func: any, mask: any, count: any): void;

    function lua_seti(L: lua_State, idx: number, n: any): void;

    function lua_setlocal(L: lua_State, ar: any, n: any): any;

    function lua_setmetatable(L: lua_State, objindex: any): any;

    function lua_settable(L: lua_State, idx: number): void;

    function lua_settop(L: lua_State, idx: number): void;

    function lua_setupvalue(L: lua_State, funcindex: any, n: any): any;

    function lua_setuservalue(L: lua_State, idx: number): void;

    function lua_status(L: lua_State): any;

    function lua_stringtonumber(L: lua_State, s: any): any;

    function lua_toboolean(L: lua_State, idx: number): any;

    function lua_tocfunction(L: lua_State, idx: number): lua_CFunction | null;

    function lua_todataview(L: lua_State, idx: number): any;

    function lua_tointeger(L: lua_State, idx: number): any;

    function lua_tointegerx(L: lua_State, idx: number): any;

    function lua_tojsstring(L: lua_State, idx: number): string;

    function lua_tolstring(L: lua_State, idx: number): any;

    function lua_tonumber(L: lua_State, idx: number): any;

    function lua_tonumberx(L: lua_State, idx: number): any;

    function lua_topointer(L: lua_State, idx: number): any;

    function lua_toproxy(L: lua_State, idx: number): any;

    function lua_tostring(L: lua_State, idx: number): Uint8Array;

    function lua_tothread(L: lua_State, idx: number): any;

    function lua_touserdata(L: lua_State, idx: number): any;

    function lua_type(L: lua_State, idx: number): any;

    function lua_typename(L: lua_State, t: any): any;

    function lua_upvalueid(L: lua_State, fidx: number, n: any): any;

    function lua_upvalueindex(i: any): any;

    function lua_upvaluejoin(L: lua_State, fidx1: any, n1: any, fidx2: any, n2: any): void;

    function lua_version(L: lua_State): any;

    function lua_xmove(from: any, to: any, n: any): void;

    function lua_yield(L: lua_State, n: any): void;

    function lua_yieldk(L: lua_State, nresults: any, ctx: any, k: any): any;

    namespace LUA_SIGNATURE {
        const BYTES_PER_ELEMENT: number;

        const byteLength: number;

        const byteOffset: number;

        const length: number;

        function copyWithin(p0: any, p1: any): any;

        function entries(): any;

        function every(p0: any): any;

        function fill(p0: any): any;

        function filter(p0: any): any;

        function find(p0: any): any;

        function findIndex(p0: any): any;

        function forEach(p0: any): any;

        function includes(p0: any): any;

        function indexOf(p0: any): any;

        function join(p0: any): any;

        function keys(): any;

        function lastIndexOf(p0: any): any;

        function map(p0: any): any;

        function reduce(p0: any): any;

        function reduceRight(p0: any): any;

        function reverse(): any;

        function set(p0: any): any;

        function slice(p0: any, p1: any): any;

        function some(p0: any): any;

        function sort(p0: any): any;

        function subarray(p0: any, p1: any): any;

        function toLocaleString(): any;

        function toString(): any;

        function values(): any;

        namespace buffer {
            const byteLength: number;

            function slice(p0: any, p1: any): any;

        }

    }

}

export namespace luaconf {
    const LUAI_MAXSTACK: number;

    const LUAL_BUFFERSIZE: number;

    const LUA_COMPAT_FLOATSTRING: boolean;

    const LUA_DIRSEP: string;

    const LUA_EXEC_DIR: string;

    const LUA_IDSIZE: number;

    const LUA_INTEGER_FMT: string;

    const LUA_INTEGER_FRMLEN: string;

    const LUA_JSDIR: string;

    const LUA_LDIR: string;

    const LUA_MAXINTEGER: number;

    const LUA_MININTEGER: number;

    const LUA_NUMBER_FMT: string;

    const LUA_NUMBER_FRMLEN: string;

    const LUA_PATH_MARK: string;

    const LUA_PATH_SEP: string;

    const LUA_SHRDIR: string;

    const LUA_VDIR: string;

    function frexp(value: any): any;

    function ldexp(mantissa: any, exponent: any): any;

    function lua_getlocaledecpoint(): any;

    function lua_integer2str(n: any): any;

    function lua_number2str(n: any): any;

    function lua_numbertointeger(n: any): any;

    function luai_apicheck(L: lua_State, e: any): void;

    namespace LUA_JSPATH_DEFAULT {
        const BYTES_PER_ELEMENT: number;

        const byteLength: number;

        const byteOffset: number;

        const length: number;

        function copyWithin(p0: any, p1: any): any;

        function entries(): any;

        function every(p0: any): any;

        function fill(p0: any): any;

        function filter(p0: any): any;

        function find(p0: any): any;

        function findIndex(p0: any): any;

        function forEach(p0: any): any;

        function includes(p0: any): any;

        function indexOf(p0: any): any;

        function join(p0: any): any;

        function keys(): any;

        function lastIndexOf(p0: any): any;

        function map(p0: any): any;

        function reduce(p0: any): any;

        function reduceRight(p0: any): any;

        function reverse(): any;

        function set(p0: any): any;

        function slice(p0: any, p1: any): any;

        function some(p0: any): any;

        function sort(p0: any): any;

        function subarray(p0: any, p1: any): any;

        function toLocaleString(): any;

        function toString(): any;

        function values(): any;

        namespace buffer {
            const byteLength: number;

            function slice(p0: any, p1: any): any;

        }

    }

    namespace LUA_PATH_DEFAULT {
        const BYTES_PER_ELEMENT: number;

        const byteLength: number;

        const byteOffset: number;

        const length: number;

        function copyWithin(p0: any, p1: any): any;

        function entries(): any;

        function every(p0: any): any;

        function fill(p0: any): any;

        function filter(p0: any): any;

        function find(p0: any): any;

        function findIndex(p0: any): any;

        function forEach(p0: any): any;

        function includes(p0: any): any;

        function indexOf(p0: any): any;

        function join(p0: any): any;

        function keys(): any;

        function lastIndexOf(p0: any): any;

        function map(p0: any): any;

        function reduce(p0: any): any;

        function reduceRight(p0: any): any;

        function reverse(): any;

        function set(p0: any): any;

        function slice(p0: any, p1: any): any;

        function some(p0: any): any;

        function sort(p0: any): any;

        function subarray(p0: any, p1: any): any;

        function toLocaleString(): any;

        function toString(): any;

        function values(): any;

        namespace buffer {
            const byteLength: number;

            function slice(p0: any, p1: any): any;

        }

    }

}

export namespace lualib {
    const LUA_BITLIBNAME: string;

    const LUA_COLIBNAME: string;

    const LUA_DBLIBNAME: string;

    const LUA_FENGARILIBNAME: string;

    const LUA_IOLIBNAME: string;

    const LUA_LOADLIBNAME: string;

    const LUA_MATHLIBNAME: string;

    const LUA_OSLIBNAME: string;

    const LUA_STRLIBNAME: string;

    const LUA_TABLIBNAME: string;

    const LUA_UTF8LIBNAME: string;

    const LUA_VERSUFFIX: string;

    function luaL_openlibs(L: lua_State): void;

    function lua_assert(c: any): void;

    function luaopen_base(L: lua_State): 1;

    function luaopen_coroutine(L: lua_State): 1;

    function luaopen_debug(L: lua_State): 1;

    function luaopen_fengari(L: lua_State): 1;

    function luaopen_io(L: lua_State): 1;

    function luaopen_math(L: lua_State): 1;

    function luaopen_os(L: lua_State): 1;

    function luaopen_package(L: lua_State): 1;

    function luaopen_string(L: lua_State): 1;

    function luaopen_table(L: lua_State): 1;

    function luaopen_utf8(L: lua_State): 1;

}

}